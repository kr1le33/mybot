import asyncio
import sqlite3
import logging
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Document, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "7485175242:AAGvI_ubPhjACTNl_YOXDrl-3ROzzcWJcUQ"
ADMIN_ID = 949263879

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

conn = sqlite3.connect('books.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS books (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        author TEXT,
        category TEXT,
        file_id TEXT
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS access (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        allowed INTEGER,
        last_request_time INTEGER
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS categories (
        name TEXT PRIMARY KEY
    )
''')
conn.commit()
conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def check_access(user_id):
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT allowed FROM access WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ username"
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT allowed, last_request_time FROM access WHERE user_id=?", (user_id,))
    row = cursor.fetchone()

    if not row:
        now = int(time.time())
        cursor.execute("INSERT INTO access (user_id, username, allowed, last_request_time) VALUES (?, ?, ?, ?)",
                       (user_id, username, 0, now))
        conn.commit()

    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu)

    if user_id == ADMIN_ID:
        admin_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data="add_book")],
                [InlineKeyboardButton(text="üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")],
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")]
            ]
        )
        await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_keyboard)

    conn.close()

@dp.message(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_message(message: Message):
    text = (
        "üéì –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ —É—á–∏—Ç–µ–ª—é –°–∞–Ω–∞—Ç –°–∞—Ä—Ö–∞—Ç–æ–≤–∏—á !\n"
        "–ó–¥–µ—Å—å —Ç–µ–±—è –æ–±—É—á–∞—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        "üìö –ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º: –ö—É—Ä—Å—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –∏ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–æ–≤ SAT\n\n"
        "üéØ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º\n"
        "‚ûó –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "üíªüè´ –û–Ω–ª–∞–π–Ω –∏ –æ—Ñ–ª–∞–π–Ω –∑–∞–Ω—è—Ç–∏—è"
    )
    await message.answer(text)

@dp.message(lambda m: m.text == "üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞")
async def categories_shortcut(message: Message):
    await show_categories(message)

@dp.callback_query(F.data == "request_access")
async def request_access(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or "–ë–µ–∑ username"
    now = int(time.time())

    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT allowed, last_request_time FROM access WHERE user_id=?", (user_id,))
    row = cursor.fetchone()

    if row:
        last_request_time = row[1]
        if row[0] == -1 and now - last_request_time < 1800:
            await callback.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.", show_alert=True)
            conn.close()
            return
        cursor.execute("UPDATE access SET allowed=0, last_request_time=? WHERE user_id=?", (now, user_id))
    else:
        cursor.execute("INSERT INTO access (user_id, username, allowed, last_request_time) VALUES (?, ?, ?, ?)",
                       (user_id, username, 0, now))

    conn.commit()
    conn.close()

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"allow_{user_id}"),
             InlineKeyboardButton(text="‚ùå –ó–∞–ø—Ä–µ—Ç–∏—Ç—å", callback_data=f"deny_{user_id}")]
        ]
    )

    await bot.send_message(
        ADMIN_ID,
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [@{username}](tg://user?id={user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Å—Ç—É–ø.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

    await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)

@dp.callback_query(F.data.startswith("allow_"))
async def allow_user(callback: CallbackQuery):
    user_id = int(callback.data.replace("allow_", ""))
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE access SET allowed=1 WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()
    await bot.send_message(user_id, "‚úÖ –í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    await callback.answer("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ.")

@dp.callback_query(F.data.startswith("deny_"))
async def deny_user(callback: CallbackQuery):
    user_id = int(callback.data.replace("deny_", ""))
    now = int(time.time())
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE access SET allowed=-1, last_request_time=? WHERE user_id=?", (now, user_id))
    conn.commit()
    conn.close()
    await bot.send_message(user_id, "‚õîÔ∏è –í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç.")
    await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

@dp.callback_query(F.data == "add_book")
async def prompt_upload_book(callback: CallbackQuery):
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM categories")
    categories = cursor.fetchall()
    conn.close()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=cat[0], callback_data=f"choose_category_{cat[0]}")] for cat in categories]
    )
    await callback.message.answer("üìÇ –í –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É?", reply_markup=keyboard)
    await callback.answer()

upload_temp = {}

@dp.callback_query(F.data.startswith("choose_category_"))
async def choose_category(callback: CallbackQuery):
    category = callback.data.replace("choose_category_", "")
    upload_temp[callback.from_user.id] = category
    await callback.message.answer(f"üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–Ω–∏–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
    await callback.answer()

@dp.message(lambda message: message.document and message.from_user.id == ADMIN_ID)
async def handle_uploaded_book(message: Message):
    category = upload_temp.get(message.from_user.id)
    if not category:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É'.")
        return
    file = message.document
    file_id = file.file_id
    title = file.file_name.rsplit('.', 1)[0]
    author = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO books (title, author, category, file_id) VALUES (?, ?, ?, ?)",
                   (title, author, category, file_id))
    conn.commit()
    conn.close()
    await message.answer(f"‚úÖ –ö–Ω–∏–≥–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'.")
    upload_temp.pop(message.from_user.id, None)

@dp.message(Command("categories"))
async def show_categories(message: Message):
    if not check_access(message.from_user.id):
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üì© –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ", callback_data="request_access")]]
        )
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.", reply_markup=keyboard)
        return
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM categories")
    categories = cursor.fetchall()
    conn.close()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=cat[0], callback_data=f"show_books_{cat[0]}")] for cat in categories]
    )
    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)

@dp.callback_query(F.data.startswith("show_books_"))
async def show_books(callback: CallbackQuery):
    category = callback.data.replace("show_books_", "")
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT title FROM books WHERE category=?", (category,))
    books = cursor.fetchall()
    conn.close()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    await callback.message.answer(f"üìÇ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: *{category}*", parse_mode="Markdown")

    if not books:
        await callback.message.answer("üòï –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –∫–Ω–∏–≥.")
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=title[0], callback_data=f"get_book_{title[0]}")] for title in books
            ]
        )
        await callback.message.answer("üìò –ö–Ω–∏–≥–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=keyboard)

    await callback.answer()

@dp.callback_query(F.data.startswith("get_book_"))
async def send_book(callback: CallbackQuery):
    title = callback.data.replace("get_book_", "")
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT file_id FROM books WHERE title=?", (title,))
    result = cursor.fetchone()
    conn.close()

    if result:
        file_id = result[0]
        await bot.send_document(callback.from_user.id, file_id, caption=title)
    else:
        await callback.message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    await callback.answer()

@dp.callback_query(F.data == "add_category")
async def prompt_add_category(callback: CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    upload_temp[callback.from_user.id] = "awaiting_category_name"
    await callback.answer()

@dp.message(lambda m: upload_temp.get(m.from_user.id) == "awaiting_category_name")
async def handle_new_category(message: Message):
    category = message.text.strip()
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO categories (name) VALUES (?)", (category,))
    conn.commit()
    conn.close()
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    upload_temp.pop(message.from_user.id)

@dp.callback_query(F.data == "delete_category")
async def prompt_delete_category(callback: CallbackQuery):
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM categories")
    categories = cursor.fetchall()
    conn.close()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=cat[0], callback_data=f"confirm_delete_{cat[0]}")] for cat in categories]
    )
    await callback.message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_category(callback: CallbackQuery):
    category = callback.data.replace("confirm_delete_", "")
    conn = sqlite3.connect('books.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM categories WHERE name=?", (category,))
    cursor.execute("DELETE FROM books WHERE category=?", (category,))
    conn.commit()
    conn.close()
    await callback.message.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –∏ –≤—Å–µ –µ—ë –∫–Ω–∏–≥–∏ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.answer()

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())